from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
import keybaord as kb

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, <b>{message.from_user.first_name}</b>!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>VPN ZapretaNet</b> üõ°\n\n"
        "–° –Ω–∞–º–∏ —Ç–≤–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±—É–¥–µ—Ç:\n"
        "<i>‚Ä¢ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ‚ùå</i>\n"
        "<i>‚Ä¢ –º–µ–¥–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç üêå</i>\n\n"
        "<b>–ë—ã—Å—Ç—Ä–æ. –°—Ç–∞–±–∏–ª—å–Ω–æ. –ê–Ω–æ–Ω–∏–º–Ω–æ ü•∑</b>\n\n",
        parse_mode="HTML",
        reply_markup=kb.menu_kb
    )

# –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data == 'profil')
async def profils(callback: CallbackQuery):
    await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ")
    await callback.message.edit_text(
        "<b>–í–ê–® –ü–†–û–§–ò–õ–¨ü•∑</b>\n\n"
        f"<b>–ò–º—è:</b> {callback.from_user.first_name}\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ:</b> <i>–Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω</i>\n"
        f"<b>–°—Ç–∞—Ç—É—Å –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏:</b> <i>–∞–∫—Ç–∏–≤–µ–Ω</i>\n\n"
        "<blockquote>–î–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –≤–µ–¥—É—Ç—Å—è —Ä–∞–±–æ—Ç—ã.</blockquote>",
        parse_mode="HTML",
        reply_markup=kb.back_kb   # <-- –≤–æ—Ç —Ç—É—Ç –º–µ–Ω—è–µ—à—å –Ω–∞ profile_kb
    )
    
# –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è     
@router.callback_query(F.data == 'back')
async def go_back(callback: CallbackQuery):
    await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é üîÑ")
    await callback.message.edit_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, <b>{callback.from_user.first_name}</b>!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>VPN ZapretaNet</b> üõ°\n\n"
        "–° –Ω–∞–º–∏ —Ç–≤–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±—É–¥–µ—Ç:\n"
        "<i>‚Ä¢ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ‚ùå</i>\n"
        "<i>‚Ä¢ –º–µ–¥–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç üêå</i>\n\n"
        "<b>–ë—ã—Å—Ç—Ä–æ. –°—Ç–∞–±–∏–ª—å–Ω–æ. –ê–Ω–æ–Ω–∏–º–Ω–æ ü•∑</b>\n\n",
        parse_mode="HTML",
        reply_markup=kb.menu_kb
    )
    
    
@router.callback_query(F.data == 'byu_vpn')
async def byu_vp(callback: CallbackQuery):
    await callback.message.edit_text(
        '–°–ø–∏—Å–æ–∫ –¢–∞—Ä–∏—Ñ–æ–≤:\n'
        '–í—Ä–µ–º–µ–Ω–Ω–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...',
        reply_markup=kb.back_kb
    )
    
    
@router.callback_query(F.data == 'faq_info')
async def info_faq(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚ùì *FAQ*\n\n"
        "üí≥ *–ü–æ—á–µ–º—É –æ–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π?*\n"
        "- –ö—Ä–∏–ø—Ç–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ö–æ–¥–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.\n"
        "- –ê–Ω–æ–Ω–∏–º–Ω–æ ‚Äî –±–µ–∑ –∫–∞—Ä—Ç –∏ –ø–∞—Å–ø–æ—Ä—Ç–æ–≤.\n"
        "- –ë—ã—Å—Ç—Ä–æ ‚Äî –ø–µ—Ä–µ–≤–æ–¥ –∑–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç.\n\n"
        "üí∏ *–ë—É–¥–µ—Ç –ª–∏ –æ–ø–ª–∞—Ç–∞ —Ä—É–±–ª—è–º–∏?*\n"
        "–ù–µ—Ç. –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –ø–ª–∞—Ç–µ–∂–∏ = –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ú—ã –¥–µ–ª–∞–µ–º —É–ø–æ—Ä –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å.\n\n"
        "ü™ô *–ö–∞–∫–∞—è –∫—Ä–∏–ø—Ç–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è?*\n"
        "–°–µ–π—á–∞—Å ‚Äî USDT –∏ TON.\n\n"
        "üìò *–ê –µ—Å–ª–∏ —è –Ω–µ —É–º–µ—é –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫—Ä–∏–ø—Ç–æ–π?*\n"
        "–í —Å–µ—Ç–∏ –ø–æ–ª–Ω–æ –≥–∞–π–¥-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –∞ –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—â–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è. –û–¥–∏–Ω —Ä–∞–∑ —Ä–∞–∑–æ–±—Ä–∞–ª—Å—è ‚Äî –¥–∞–ª—å—à–µ –≤—Å—ë –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ.",
        parse_mode="Markdown", reply_markup=kb.back_kb
    )

